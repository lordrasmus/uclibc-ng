name: z_images_workflow

on:
  workflow_call:
    

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    
      - uses: actions/checkout@master
        with:
          fetch-depth: 1
          
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: artifacts
    
      # Use the output from the reusable workflow to upload the artifacts
      - name: Infos
        run: |
           jq '.' infos.json
      
      - name: parse Config JSON
        id: parse-json
        run: |
          json=$(cat infos.json)
          for key in $(echo "$json" | jq -r 'keys[]'); do
            value=$(echo "$json" | jq -r ".$key")
            echo "$key=$value" >> "$GITHUB_ENV"
          done
          

#      - name: Install dev packages
#        run: |
#          sudo apt-get update
#          sudo apt-get install tar

      - name: Install Toolchain
        run: |
           tar -xaf $CONFIG_TOOLCHAIN.tar.xz

      - name: add PATH
        run: echo "$(pwd)/$CONFIG_TOOLCHAIN/usr/bin/" >> $GITHUB_PATH

      - name: extract Sysroot
        run: |
          tar -xf sysroot.tar


      - name: init RootFS
        run: |
          mkdir -p rootfs/bin
          ( cd rootfs ; ln -s /sbin/init init )
          ( cd rootfs ; mkdir dev; mkdir etc; mkdir proc; mkdir sys ; mkdir tmp )
          echo "::sysinit:/bin/mount -t devtmpfs none /dev" >  rootfs/etc/inittab
          echo "::sysinit:/bin/mount -t proc none /proc" >> rootfs/etc/inittab
          echo "::sysinit:/bin/mount -t sysfs none /sys" >> rootfs/etc/inittab
          echo "::sysinit:/bin/dmesg -n1" >>  rootfs/etc/inittab
          echo "::sysinit:/bin/echo 'test console' > /dev/console" >> rootfs/etc/inittab
          echo "::sysinit:/bin/echo 'test ttyS0' > /dev/ttyS0" >> rootfs/etc/inittab
          echo "console::sysinit:/bin/run_tests.sh" >> rootfs/etc/inittab
          echo "console::respawn:/bin/sh" >> rootfs/etc/inittab
          
          
          
          echo "#!/bin/sh"                                                           >  rootfs/bin/run_tests.sh
          echo "echo -n 'Disabled Tests :' ; cat /tests_disable"                     >> rootfs/bin/run_tests.sh
          echo "cd /usr/lib/uclibc-ng-test/test/"                                    >> rootfs/bin/run_tests.sh
          echo "echo '-------------------- tests_start ------------------------'"    >> rootfs/bin/run_tests.sh
          echo "sh uclibcng-testrunner_qemu.sh"                                           >> rootfs/bin/run_tests.sh
          echo "echo '-------------------- tests_end --------------------------'"    >> rootfs/bin/run_tests.sh
          chmod 777 rootfs/bin/run_tests.sh
          
          #           shared libs copy          #
          mkdir -p rootfs/usr/lib/
          cp -r sysroot/lib/ rootfs/ 
          if ls sysroot/usr/lib/*.so* 1>/dev/null 2>&1; then
              cp -a sysroot/usr/lib/*.so* rootfs/usr/lib/
          else
              echo "Keine .so Dateien in sysroot/usr/lib/ gefunden."
          fi
          
      
      - name: Build Testsuite
        run: |
          echo "08:00:20:00:61:CA  pal"           > rootfs/etc/ethers
          echo "08:00:20:00:61:CB  192.168.11.2" >> rootfs/etc/ethers
          echo "08:00:20:00:61:CC  teeth"        >> rootfs/etc/ethers
          echo "127.0.0.1 localhost"              > rootfs/etc/hosts
          echo "root:x:0:"                        > rootfs/etc/group
          echo "root:x:0:0:root:/root:/bin/sh"    > rootfs/etc/passwd
          
          #git clone https://cgit.uclibc-ng.org/cgi/cgit/uclibc-ng-test.git/
          git clone https://github.com/lordrasmus/uclibc-ng-test.git
          echo "export $(./uclibc-ng-test/get_disabled_tests.py uclibc-ng-config)" > tests_disable
          
          echo "### Disabled Tests :bulb:" >> $GITHUB_STEP_SUMMARY
          cat tests_disable >> "$GITHUB_STEP_SUMMARY"
          . tests_disable
          CROSS_COMPILE=$CONFIG_GCC_PREFIX CFLAGS="--sysroot=$(pwd)/sysroot/" LDFLAGS="--sysroot=$(pwd)/sysroot/ "   make -C uclibc-ng-test -j20 2>&1  | tee  testsuite_build.log
          CROSS_COMPILE=$CONFIG_GCC_PREFIX CFLAGS="--sysroot=$(pwd)/sysroot/" LDFLAGS="--sysroot=$(pwd)/sysroot/ "   make -C uclibc-ng-test install DESTDIR=../rootfs > /dev/null 2>&1
          find rootfs -type f -name '*.gdb' -exec rm {} \;
          
          cp tests_disable rootfs
      
      
      - name: Build Busybox
        run: |
          #wget -nv https://busybox.net/downloads/busybox-1.36.1.tar.bz2
          wget -nv  https://raw.githubusercontent.com/lordrasmus/toolchains/main/busybox-1.36.1.tar.bz2
          tar -xaf busybox-1.36.1.tar.bz2
          make -C busybox-1.36.1/ defconfig
          sed -i 's/CONFIG_CROSS_COMPILER_PREFIX=""/CONFIG_CROSS_COMPILER_PREFIX="'$CONFIG_GCC_PREFIX'"/' busybox-1.36.1/.config
          sed -i 's|CONFIG_SYSROOT=""|CONFIG_SYSROOT="'$(pwd)'/sysroot/"|' busybox-1.36.1/.config
          sed -i 's|CONFIG_PREFIX="./_install"|CONFIG_PREFIX="../rootfs"|'  busybox-1.36.1/.config
          sed -i 's|CONFIG_FEATURE_EJECT_SCSI=y|# CONFIG_FEATURE_EJECT_SCSI is not set|'  busybox-1.36.1/.config
          
          if [[ $UCLIBC_VDSO == "No" ]] ; then
            sed -i 's|# CONFIG_STATIC is not set|CONFIG_STATIC=y|'  busybox-1.36.1/.config
          fi
          
          sed -i 's|CONFIG_MKSWAP=y|# CONFIG_MKSWAP is not set|'  busybox-1.36.1/.config
          sed -i 's|CONFIG_SWAPON=y|# CONFIG_SWAPON is not set|'  busybox-1.36.1/.config
          sed -i 's|CONFIG_SWAPOFF=y|# CONFIG_SWAPOFF is not set|'  busybox-1.36.1/.config
          # no MMU fixes
          if [[ $UCLIBC_MMU == "No" ]] ; then
            sed -i 's|CONFIG_SHELL_ASH=y|# CONFIG_SHELL_ASH is not set|'  busybox-1.36.1/.config
            sed -i 's|CONFIG_ASH=y|# CONFIG_ASH is not set|'  busybox-1.36.1/.config
            sed -i 's|CONFIG_SH_IS_ASH=y|# CONFIG_SH_IS_ASH is not set|'  busybox-1.36.1/.config
            sed -i 's|# CONFIG_SH_IS_HUSH is not set|CONFIG_SH_IS_HUSH=y|'  busybox-1.36.1/.config
            sed -i 's|# CONFIG_NOMMU is not set|CONFIG_NOMMU=y|'  busybox-1.36.1/.config
          fi
          if [[ $UCLIBC_ARCH == "xtensa" ]] ; then
            sed -i 's|CONFIG_EXTRA_CFLAGS=".*"|CONFIG_EXTRA_CFLAGS="-mlongcalls"|g'  busybox-1.36.1/.config
          fi
          
          if [[ $UCLIBC_FORMAT_FLAT == "y" ]] ; then
            echo "no strip"
            SKIP_STRIP=y make -C busybox-1.36.1 -j20 busybox
            SKIP_STRIP=y make -C busybox-1.36.1/ install > /dev/null
          else
            SKIP_STRIP=0 make -C busybox-1.36.1 -j20 busybox
            SKIP_STRIP=0 make -C busybox-1.36.1/ install > /dev/null
          fi
          
          
      - name: Build RootFS Image
        run: |
          ( cd rootfs ; ln -s lib lib32 )
          ( cd rootfs ; ln -s lib lib64 )
          ( cd rootfs ; ln -s lib libx32 )
          ( cd rootfs/usr ; ln -s lib lib32 )
          ( cd rootfs/usr ; ln -s lib lib64 )
          ( cd rootfs/usr ; ln -s lib libx32 )
          ( cd rootfs ; find . | sort | cpio -o -H newc ) > rootfs.img
          xz --check=crc32 -k rootfs.img

      - name: Fetch Qemu Kernel Image
        run: |
          if [[ ! ${CONFIG_QEMU_KERNEL} == "" ]] ; then
            wget -nv  "https://github.com/lordrasmus/uclibc-ng-qemu-imgs/blob/main/${CONFIG_QEMU_KERNEL}?raw=true" -O kernel.img
            CONFIG_QEMU_KERNEL_CONF="${CONFIG_QEMU_KERNEL%.img}.config"
            wget -nv  "https://github.com/lordrasmus/uclibc-ng-qemu-imgs/blob/main/${CONFIG_QEMU_KERNEL_CONF}?raw=true" -O kernel.config
          else
            echo "No Qemu Kernel configured"
          fi
            
          
      - name: Qemu Testsuite run command
        run: |
          echo "### Qemu run command :bulb:" >> $GITHUB_STEP_SUMMARY
          echo "$CONFIG_QEMU_CMD" >> $GITHUB_STEP_SUMMARY

      - name: upload RootFS Image
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          overwrite: true
          path: |
            kernel.img
            kernel.config
            rootfs.img
            rootfs.img.xz
            infos.json  
            linux-*
            sysroot.tar  
            toolchain-*.tar.xz
            uclibc-ng-config
            
     
      - name: upload testsuite_build.log
        uses: actions/upload-artifact@v4
        with:
          name: testsuite_build.log
          path: testsuite_build.log
          
      
      - name: create Devel Package
        if: github.event_name == 'push'
        env:
          UPLOAD_KEY: ${{ secrets.UPLOAD_KEY }} 
        run: |
          export devel_name=devel_pack_${{ github.workflow }}
          mkdir -p $devel_name/files/
          xz -e -9 sysroot.tar
          cp $CONFIG_TOOLCHAIN.tar.xz $devel_name/files/
          cp sysroot.tar.xz $devel_name/files/
          cp busybox-1.36.1.tar.bz2 $devel_name/files/
          cp rootfs.img* $devel_name/files/
          cp uclibc-ng-config $devel_name/files/
          if [ -e kernel.img ] ; then cp kernel.img $devel_name/files/ ; fi
          if [ -e kernel.config ] ; then cp kernel.config $devel_name/files/ ; fi
          cp linux-$CONFIG_KERNEL_VERS.tar.xz $devel_name/files/
          
          cp infos.json $devel_name
          
          tar -cf $devel_name.tar $devel_name
          
          python3 .github/tools/upload.py $devel_name.tar
          
        


